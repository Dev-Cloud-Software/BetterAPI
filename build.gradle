plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.diffplug.spotless" version "6.21.0"
    id "java"
}

group project.property("group")
version project.property("version")

apply from: "$rootDir/gradle/publish.gradle"

tasks {
    publish {
        dependsOn(spotlessApply)
        dependsOn(shadowJar)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    // EnderNation
    maven {
        name = "devcloud-repo"
        url = "https://repos.dev-cloud.systems/repository/devcloud-public/"
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:1.18.20"
    compileOnly "io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT"
    compileOnly "org.projectlombok:lombok:1.18.20"
}

shadowJar {
    archiveFileName.set("${project.name}-${version}-shadow.jar")
    configurations = [project.configurations.runtimeClasspath, project.configurations.shadow]
}

tasks {
    build {
        dependsOn(spotlessApply)
        dependsOn(shadowJar)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("paper-plugin.yml") {
        expand props
    }
}

compileJava {
    options.encoding = "UTF-8"
}

spotless {
    java {
        target fileTree("./src/main/java/") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        palantirJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        importOrder()
        formatAnnotations()

        licenseHeaderFile(rootProject.file("LICENSE_HEADER"))
    }
}

defaultTasks "build"